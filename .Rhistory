# Import the training set: train
train_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/train.csv"
train <- read.csv(train_url)
# Import the testing set: test
test_url <- "http://s3.amazonaws.com/assets.datacamp.com/course/Kaggle/test.csv"
test <- read.csv(test_url)
# Print train and test to the console
train
test
# Your train and test set are still loaded
str(train)
str(test)
# Survival rates in absolute numbers
table(train$Survived)
# Survival rates in proportions
prop.table(table(train$Survived))
# Two-way comparison: Sex and Survived
table(train$Sex, train$Survived)
# Two-way comparison: row-wise proportions
prop.table(table(train$Sex, train$Survived), 1)
# Create the column child, and indicate whether child or no child
train$Child <- NA
train$Child[train$Age < 18] <- 1
train$Child[train$Age >= 18] <- 0
# Two-way comparison
table(train$Child)
prop.table(table(train$Child))
prop.table(table(train$Child, train$Survived), 1)
# Your train and test set are still loaded in
str(train)
str(test)
# Copy of test
test_one <- test
# Initialize a Survived column to 0
test_one$Survived = 0
# Set Survived to 1 if Sex equals "female"
test_one$Survived[test$Sex == "female"] <- 1
# Load in the R package
library(rpart)
# Your train and test set are still loaded in
str(train)
str(test)
# Build the decision tree
my_tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
# Visualize the decision tree using plot() and text()
plot(my_tree_two)
text(my_tree_two)
# Load in the packages to build a fancy plot
library(rattle)
install.packages("rattle")
install.packages("rpart.plot")
install.packages("RColorBrewer")
# Load in the R package
library(rpart)
# Your train and test set are still loaded in
str(train)
str(test)
# Build the decision tree
my_tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
# Visualize the decision tree using plot() and text()
plot(my_tree_two)
text(my_tree_two)
# Load in the packages to build a fancy plot
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# Time to plot your fancy tree
fancyRpartPlot(my_tree_two)
# my_tree_two and test are available in the workspace
my_tree_two
test
# Make predictions on the test set
# my_tree_two is the tree model you've just built
# test is the data set to build the preditions for
# type = "class" specifies that you want to classify observations.
my_prediction <- predict(my_tree_two, newdata = test, type = "class")
# Convert predictions to a CSV file with exactly 418 entries
# and 2 columns PassengerId and Survived
# Finish the data.frame() call
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
# Use nrow() on my_solution
nrow(my_solution)
# Finish the write.csv() call
write.csv(my_solution, file = "my_solution1.csv", row.names = FALSE)
# Your train and test set are still loaded in
# Change this command
my_tree_three <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train, method = "class", control = rpart.control(minsplit = 50, cp = 0))
# Visualize my_tree_three
fancyRpartPlot(my_tree_three)
# train and test are available
# Create train_two
train_two <- train
train_two$family_size <- train_two$SibSp + train_two$Parch + 1
# Finish the command
my_tree_four <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked +family_size, data = train_two, method = "class")
# Visualize your new decision tree
fancyRpartPlot(my_tree_four)
# train_new and test_new are available in the workspace
# Finish the command
my_tree_five <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, data = train_new, method = "class")
# Load in the R package
library(rpart)
# Your train and test set are still loaded in
str(train)
str(test)
# Build the decision tree
my_tree_two <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked, data = train, method = "class")
# Visualize the decision tree using plot() and text()
plot(my_tree_two)
text(my_tree_two)
# Load in the packages to build a fancy plot
library(rattle)
library(rpart.plot)
library(RColorBrewer)
# Time to plot your fancy tree
fancyRpartPlot(my_tree_two)
# my_tree_two and test are available in the workspace
my_tree_two
test
# Make predictions on the test set
# my_tree_two is the tree model you've just built
# test is the data set to build the preditions for
# type = "class" specifies that you want to classify observations.
my_prediction <- predict(my_tree_two, newdata = test, type = "class")
# Convert predictions to a CSV file with exactly 418 entries
# and 2 columns PassengerId and Survived
# Finish the data.frame() call
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
# Use nrow() on my_solution
nrow(my_solution)
# Finish the write.csv() call
write.csv(my_solution, file = "my_solution1.csv", row.names = FALSE)
# Your train and test set are still loaded in
# Change this command
my_tree_three <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked,
data = train, method = "class", control = rpart.control(minsplit = 50, cp = 0))
# Visualize my_tree_three
fancyRpartPlot(my_tree_three)
# train and test are available
# Create train_two
train_two <- train
train_two$family_size <- train_two$SibSp + train_two$Parch + 1
# Finish the command
my_tree_four <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked +family_size, data = train_two, method = "class")
# Visualize your new decision tree
fancyRpartPlot(my_tree_four)
# train_new and test_new are available in the workspace
# Finish the command
my_tree_five <- rpart(Survived ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title, data = train_new, method = "class")
# All data, both training and test set
all_data
load("D:/RStudioWD/DataCamp_R/all_data.RData")
# All data, both training and test set
all_data
# Passenger on row 62 and 830 do not have a value for embarkment.
# Since many passengers embarked at Southampton, we give them the value S.
all_data$Embarked[c(62, 830)] <- "S"
# Factorize embarkment codes.
all_data$Embarked <- factor(all_data$Embarked)
# Passenger on row 1044 has an NA Fare value. Let's replace it with the median fare value.
all_data$Fare[1044] <- median(all_data$Fare, na.rm = TRUE)
# How to fill in missing Age values?
# We make a prediction of a passengers Age using the other variables and a decision tree model.
# This time you give method = "anova" since you are predicting a continuous variable.
library(rpart)
predicted_age <- rpart(Age ~ Pclass + Sex + SibSp + Parch + Fare + Embarked + Title + family_size,
data = all_data[!is.na(all_data$Age),], method = "anova")
all_data$Age[is.na(all_data$Age)] <- predict(predicted_age, all_data[is.na(all_data$Age),])
# Split the data back into a train set and a test set
train <- all_data[1:891,]
test <- all_data[892:1309,]
# train and test are available in the workspace
str(train)
str(test)
# Load in the package
library(randomForest)
install.packages("randomForest")
# train and test are available in the workspace
str(train)
str(test)
# Load in the package
library(randomForest)
# Set seed for reproducibility
set.seed(111)
# Apply the Random Forest Algorithm
my_forest <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title,
data = train, importance = TRUE, ntree = 1000)
# Make your prediction using the test set
my_prediction <- predict(my_forest, test)
# Create a data frame with two columns: PassengerId & Survived. Survived contains your predictions
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
# Write your solution away to a csv file with the name my_solution.csv
write.csv(my_solution, file = "my_solution3.csv", row.names = FALSE)
# train and test are available in the workspace
str(train)
str(test)
# Load in the package
library(randomForest)
# Set seed for reproducibility
set.seed(111)
# Apply the Random Forest Algorithm
my_forest <- randomForest(as.factor(Survived) ~ Pclass + Sex + Age + SibSp + Parch + Fare + Embarked + Title,
data = train, importance = TRUE, ntree = 1000)
# Make your prediction using the test set
my_prediction <- predict(my_forest, test)
# Create a data frame with two columns: PassengerId & Survived. Survived contains your predictions
my_solution <- data.frame(PassengerId = test$PassengerId, Survived = my_prediction)
# Write your solution away to a csv file with the name my_solution.csv
write.csv(my_solution, file = "my_solution3.csv", row.names = FALSE)
varImpPlot(my_forest)
library(dplyr)
install.packages('dplyr')
install.packages("dplyr")
library("dbplyr", lib.loc="C:/Program Files/R/R-3.4.0/library")
library(dplyr)
library(dplyr)
applenews %>%
select(category) %>%
summarise(n_distinct(category))
load('Statistics/applenews.RData')
setwd("D:/RStudioWD/riii")
load('Statistics/applenews.RData')
applenews %>%
select(category) %>%
summarise(n_distinct(category))
cat_stat = applenews %>%
group_by(category) %>%
summarise(clicked_sum = sum(clicked))
barplot(cat_stat$clicked_sum, names.arg=cat_stat$category,
col=rainbow(length(cat_stat$category)))
pie(cat_stat$clicked_sum, label = cat_stat$category)
g <- ggplot(category_stat,aes(x=category,y=mean))
library(ggplot2)
g <- ggplot(category_stat,aes(x=category,y=mean))
category_stat = tbl(my_database,"applenews") %>%
group_by(category) %>%
summarise_at(.funs=funs(min,max,mean), .vars=vars(matches('clicked'))) %>%
arrange(desc(mean)) %>%
collect()
install.packages('dbplyr')
install.packages("dbplyr")
install.packages('dbplyr')
install.packages('RSQLite')
library('dbplyr')
library('RSQLite')
my_database = src_sqlite('./mydatabase',create=T)
my_database = src_sqlite('./mydatabase',create=T)
library('RSQLite')
my_database = src_sqlite('./mydatabase',create=T)
my_database = src_sqlite('./mydatabase',create=T)
library('dplyr')
?src_sqlite
my_database = src_sqlite('./mydatabase',create=T)
copy_to(my_database,applenews,temporary = F)
tbl(my_database,"applenews")
tbl(my_database,"applenews") %>% collect()
category_stat = tbl(my_database,"applenews") %>%
group_by(category) %>%
summarise_at(.funs=funs(min,max,mean), .vars=vars(matches('clicked'))) %>%
arrange(desc(mean)) %>%
collect()
library('ggplot2')
version

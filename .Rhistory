g <- ggplot(cdc,aes(x=weight))
g2 = g + geom_histogram() + facet_wrap(~genhlth)
g2
ggplot(aes(x = price_per_sqmeter), data = house) +
geom_bar(position='identity') +
facet_wrap(~area)
ggplot(aes(x = price_per_sqmeter), data = house) +
geom_bar(position='identity') +
facet_wrap(~area)
house$price_per_sqmeter
ggplot(aes(x = house$price_per_sqmeter), data = house) +
geom_bar(position='identity') +
facet_wrap(~area)
ggplot(aes(x = house$price_per_sqmeter), data = house) +
geom_bar(position='identity') +
facet_wrap(~area)
library('ggplot2')
g <- ggplot(cdc,aes(x=height,y=weight))
g + geom_point(aes(col=exerany))
g <- ggplot(cdc,aes(x=genhlth))
g + geom_bar()
# basic syntax
# ggplot(data,aes(x,y,group,...))+geom_object(...)
# install.packages('ggplot2')
library('ggplot2')
g <- ggplot(cdc,aes(x=height,y=weight))
g + geom_point(aes(col=exerany))
g <- ggplot(cdc,aes(x=genhlth))
g + geom_bar()
g + geom_bar() + ylab('Count') + ggtitle('cdc')
# fill => 填滿顏色; color => 邊線顏色
g + geom_bar(fill='snow',color='black')
g <- ggplot(cdc,aes(x=genhlth,fill=gender))
g+geom_bar()
# g <- ggplot(cdc,aes(x=genhlth))
# g+geom_bar(aes(fill=gender))
g_bygrp <- ggplot(cdc,aes(x=exerany,fill=genhlth))
g_bygrp + geom_bar()
par(mfrow=c(1,1))
g_bygrp + geom_bar(position='stack')
g_bygrp + geom_bar(position='dodge')
g_bygrp + geom_bar(position='identity')
precounted = as.data.frame(table(cdc$genhlth,dnn = c('genhlth')))
precounted
ggplot(precounted,aes(x=genhlth,y=Freq)) + geom_bar(stat='identity')
g <- ggplot(cdc,aes(x=genhlth,y=height))
g + geom_boxplot()
# facet
g <- ggplot(cdc,aes(x=weight))
g2 = g + geom_histogram() + facet_wrap(~genhlth)
ggsave(filename='your_file_name.png',plot = g2)
#(9) 請使用house資料,利用ggplot2的facet_wrap函數繪製各行政區房屋每平方米價格(price_per_sqmeter)的直方圖 [8分]
ggplot(aes(x = house$price_per_sqmeter), data = house) +
geom_bar(position='identity') +
facet_wrap(~area)
#  scale_x_continuous(breaks = 1:31)
#  theme(text = element_text(size=10))
?facet_wrap
ggplot(aes(x = price_per_sqmeter), data = house) +
geom_bar() +
facet_wrap(~area)
ggplot(aes(x = price_per_sqmeter), data = house) +
geom_histogram() +
facet_wrap(~area)
ggplot(aes(x = price_per_sqmeter), data = house) +
geom_histogram() +
facet_wrap(~area)
ggplot(aes(x = price_per_sqmeter), data = house) +
geom_barplot() +
facet_wrap(~area)
ggplot(aes(x = price_per_sqmeter), data = house) +
geom_histogram() +
facet_wrap(~area)
str(house)
lvr_prices$finish_ymd
c(lvr_prices$finish_ymd)
str(lvr_prices$finish_ymd)
getwd()
setwd("D:/RStudioWD/riii")
load("./final/lvr_prices_big5.RData")
#(1) 請讀取final資料夾下的lvr_prices_big5.RData檔案 [5分]
getwd()
setwd("D:/RStudioWD/riii")
load("./final/lvr_prices_big5.RData")
#(2) 請問可使用哪個函式觀看檔案的資料結構？[5分]
str(lvr_prices)
#(3) 請問可使用哪個函式觀看資料前10筆資料？[5分]
head(lvr_prices, 10)
#(4) 請篩選出
#  1. city_land_type為住宅用
#  2. total_price > 0
#  3. building_sqmeter > 0
#  4. finish_ymd 非空值
#  的房屋資料,並存入house變數中。[8分]
house = lvr_prices[which(lvr_prices$city_land_type == "住" &
lvr_prices$total_price > 0 &
lvr_prices$building_sqmeter > 0 &
c(lvr_prices$finish_ymd) != 1), ]
#(5) 請使用house資料，利用房屋價格(total_price)及房屋平方米數(building_sqmeter)兩欄位，
#    產生一新欄位為每平方米價格(price_per_sqmeter)，並將其四捨五入到整數位。[5分]
price_per_sqmeter = round(house$total_price / house$building_sqmeter)
house$price_per_sqmeter = c(price_per_sqmeter)
#(6) 請使用house資料，利用scale() 將每平方米價格(price_per_sqmeter)欄位資料標準化
#    ，並剔除掉outlier資料(z-score > 3)。[5分]
house = house[abs(scale(house$price_per_sqmeter)) <= 3,]
#(7) 請問在house資料中各行政區(area)的資料筆數為何? 可否畫出其長條圖? [5分]
table(house$area)
barplot(table(house$area))
#(8) 請使用house資料，計算各行政區每平方米價格(price_per_sqmeter)欄位資料的平均數，中位數及標準差 [8分]
paste("平均數", mean(house$price_per_sqmeter))
paste("中位數", median(house$price_per_sqmeter))
paste("標準差", sqrt(var(house$price_per_sqmeter)))
summary(house$price_per_sqmeter)
tapply(house$price_per_sqmeter,house$area,function(e){list('mean'=mean(e),'median'=median(e),'sd'=sd(e))})
#(9) 請使用house資料,利用ggplot2的facet_wrap函數繪製各行政區房屋每平方米價格(price_per_sqmeter)的直方圖 [8分]
ggplot(aes(x = price_per_sqmeter), data = house) +
geom_histogram() +
facet_wrap(~area)
library(ggplot2)
#(9) 請使用house資料,利用ggplot2的facet_wrap函數繪製各行政區房屋每平方米價格(price_per_sqmeter)的直方圖 [8分]
library(ggplot2)
ggplot(aes(x = price_per_sqmeter), data = house) +
geom_histogram() +
facet_wrap(~area)
#(10) 試利用房屋完工日期(finish_ymd)產生一新變數為屋齡(building_age)加入house資料中。
# hint1: 取得當前日期的函數為 Sys.Date()
# hint2: 一年請以365天計算，四捨五入至整數位
# hint3: 將運算完的資料轉為整數型態(integer) [8分]
building_age = as.integer(round((Sys.Date() - as.Date(house$finish_ymd)) / 365))
house$building_age = c(building_age)
#(11) 請讀取final資料夾下的house_danger.RData檔案，
#     並將house資料集和house_danger資料集以left outer join方式join起來，
#     存回house變數中 [5分]
load("./final/house_danger.RData")
house <- merge(x = house, y = house_danger, all.x = TRUE)
sum(is.na(lvr_prices$finish_ymd))
is.na(lvr_prices$finish_ymd)
!is.na(lvr_prices$finish_ymd)
View(lvr_prices$finish_ymd)
lvr_prices$finish_ymd
str(lvr_prices$finish_ymd)
ggplot(aes(x = price_per_sqmeter), data = house) +
geom_histogram(color = 'black', fill = '#F79420') +
facet_wrap(~area) +
xlab('Number of years using Facebook') +
ylab('Number of users in sample')
ggplot(aes(x = price_per_sqmeter), data = house) +
geom_histogram(color = 'black', fill = '#099DD9') +
facet_wrap(~area) +
xlab('price_per_sqmeter') +
ylab('Area')
ggplot(aes(x = price_per_sqmeter), data = house) +
geom_histogram(color = 'black', fill = '#099DD9') +
facet_wrap(~area) +
xlab('price_per_sqmeter') +
ylab('Area')
house$price_per_sqmeter
table(house$area, house$price_per_sqmeter)
table(house$area)
by(house$area, house$price_per_sqmeter)
?by
ggplot(aes(x = tenure / 365), data = pf) +
geom_histogram(binwidth = .25, color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(1, 7, 1), limits = c(0, 7)) +
xlab('Number of years using Facebook') +
ylab('Number of users in sample')
qplot(x = tenure/365, data = pf, binwidth = .25,
xlab = 'Number of years using Facebook',
ylab = 'Number of users in sample',
color = I('black'), fill = I('#F79420')) +
scale_x_continuous(lim = c(0, 7), breaks = seq(1, 7, 1))
ggplot(aes(x = tenure / 365), data = pf) +
geom_histogram(binwidth = .25, color = 'black', fill = '#F79420') +
scale_x_continuous(breaks = seq(1, 7, 1), limits = c(0, 7)) +
xlab('Number of years using Facebook') +
ylab('Number of users in sample')
lvr_prices$finish_ymd
str(lvr_prices$finish_ymd)
c(lvr_prices$finish_ymd)
is.na(lvr_prices$finish_ymd)
str(lvr_prices$finish_ymd)
type(lvr_prices$finish_ymd)
lvr_prices$finish_ymd
lvr_prices$finish_ymd = ""
lvr_prices$finish_ymd == ""
lvr_prices$finish_ymd
str(lvr_prices$finish_ymd)
#(1) 請讀取final資料夾下的lvr_prices_big5.RData檔案 [5分]
getwd()
setwd("D:/RStudioWD/riii")
load("./final/lvr_prices_big5.RData")
#(2) 請問可使用哪個函式觀看檔案的資料結構？[5分]
str(lvr_prices)
#(3) 請問可使用哪個函式觀看資料前10筆資料？[5分]
head(lvr_prices, 10)
lvr_prices$finish_ymd
lvr_prices$finish_ymd == NA
#(1) 請讀取final資料夾下的lvr_prices_big5.RData檔案 [5分]
getwd()
setwd("D:/RStudioWD/riii")
load("./final/lvr_prices_big5.RData")
#(4) 請篩選出
#  1. city_land_type為住宅用
#  2. total_price > 0
#  3. building_sqmeter > 0
#  4. finish_ymd 非空值
#  的房屋資料,並存入house變數中。[8分]
house = lvr_prices[which(lvr_prices$city_land_type == "住" &
lvr_prices$total_price > 0 &
lvr_prices$building_sqmeter > 0 &
c(lvr_prices$finish_ymd) != 1), ]
#(7) 請問在house資料中各行政區(area)的資料筆數為何? 可否畫出其長條圖? [5分]
table(house$area)
barplot(table(house$area))
str(price_per_sqmeter)
str(house$price_per_sqmeter)
#(4) 請篩選出
#  1. city_land_type為住宅用
#  2. total_price > 0
#  3. building_sqmeter > 0
#  4. finish_ymd 非空值
#  的房屋資料,並存入house變數中。[8分]
house = lvr_prices[which(lvr_prices$city_land_type == "住" &
lvr_prices$total_price > 0 &
lvr_prices$building_sqmeter > 0 &
c(lvr_prices$finish_ymd) != 1), ]
#(5) 請使用house資料，利用房屋價格(total_price)及房屋平方米數(building_sqmeter)兩欄位，
#    產生一新欄位為每平方米價格(price_per_sqmeter)，並將其四捨五入到整數位。[5分]
price_per_sqmeter = round(house$total_price / house$building_sqmeter)
house$price_per_sqmeter = c(price_per_sqmeter)
#(6) 請使用house資料，利用scale() 將每平方米價格(price_per_sqmeter)欄位資料標準化
#    ，並剔除掉outlier資料(z-score > 3)。[5分]
house = house[abs(scale(house$price_per_sqmeter)) <= 3,]
#(7) 請問在house資料中各行政區(area)的資料筆數為何? 可否畫出其長條圖? [5分]
table(house$area)
barplot(table(house$area))
#(8) 請使用house資料，計算各行政區每平方米價格(price_per_sqmeter)欄位資料的平均數，中位數及標準差 [8分]
paste("平均數", mean(house$price_per_sqmeter))
paste("中位數", median(house$price_per_sqmeter))
paste("標準差", sqrt(var(house$price_per_sqmeter)))
summary(house$price_per_sqmeter)
tapply(house$price_per_sqmeter,house$area,function(e){list('mean'=mean(e),'median'=median(e),'sd'=sd(e))})
#(9) 請使用house資料,利用ggplot2的facet_wrap函數繪製各行政區房屋每平方米價格(price_per_sqmeter)的直方圖 [8分]
library(ggplot2)
ggplot(aes(x = price_per_sqmeter), data = house) +
geom_histogram(color = 'black', fill = '#099DD9') +
facet_wrap(~area) +
xlab('price_per_sqmeter') +
ylab('Area')
#(10) 試利用房屋完工日期(finish_ymd)產生一新變數為屋齡(building_age)加入house資料中。
# hint1: 取得當前日期的函數為 Sys.Date()
# hint2: 一年請以365天計算，四捨五入至整數位
# hint3: 將運算完的資料轉為整數型態(integer) [8分]
building_age = as.integer(round((Sys.Date() - as.Date(house$finish_ymd)) / 365))
house$building_age = c(building_age)
#(11) 請讀取final資料夾下的house_danger.RData檔案，
#     並將house資料集和house_danger資料集以left outer join方式join起來，
#     存回house變數中 [5分]
load("./final/house_danger.RData")
house <- merge(x = house, y = house_danger, all.x = TRUE)
library(rpart)
ind <- sample(1:2, size=nrow(house), replace=T, prob=c(0.7, 0.3))
trainset = house[ind==1,]
testset = house[ind==2,]
ind
ind
set.seed(1000)
ind <- sample(1:2, size=nrow(house), replace=T, prob=c(0.7, 0.3))
trainset = house[ind==1,]
testset = house[ind==2,]
set.seed(1206)
ind <- sample(1:2, size=nrow(house), replace=T, prob=c(0.7, 0.3))
trainset = house[ind==1,]
testset = house[ind==2,]
install.packages("C50")
library(C50)
data(churn)
str(churnTrain)
names(churnTrain) %in% c("state", "area_code", "account_length")
!names(churnTrain) %in% c("state", "area_code", "account_length")
# 選擇建模變數
variable.list = !names(churnTrain) %in% c('state','area_code','account_length')
churnTrain=churnTrain[,variable.list]
str(churnTrain)
# sample
?sample
sample(1:10)
sample(1:10, size = 5)
sample(c(0,1), size= 10, replace = T)
sample.int(20, 12) # 兩個參數都要放整數，此例為取1:20中的12個不重複樣本
set.seed(2)
# 把資料分成training data 和 testing data
ind <- sample(1:2, size=nrow(churnTrain), replace=T, prob=c(0.7, 0.3))
trainset = churnTrain[ind==1,]
testset = churnTrain[ind==2,]
table(sample(x = 1:2,size = 100, replace=T))
set.seed(1)
table(sample(x = 1:2,size = 100, replace=T, prob=c(0.7,0.3)))
a = c(1,2,3,4,5,6,7,8,9)
ind = c(1,0,1,0,1,0,1,0,1)
ind == 1
a[ind == 1]
a[ind == 0]
install.packages('rpart')
library('rpart')
# 使用rpart(CART)建立決策樹模型
churn.rp<-rpart(churn ~ ., data=trainset)
churn.rp
summary(churn.rp)
con = rpart.control(cp=0.01)
?rpart.control
churn.rp<-rpart(churn ~., data=trainset,control = con)
# 畫出決策樹
par(mfrow=c(1,1))
plot(churn.rp, margin=0.1)
plot(churn.rp, uniform=TRUE,branch = 0.6, margin=0.1)
?plot.rpart
text(churn.rp)
text(churn.rp, all=TRUE, use.n=TRUE)
printcp(churn.rp)
install.packages("rpart")
install.packages("rpart")
library('rpart')
install.packages('rpart')
library('rpart')
install.packages("rpart")
library('rpart')
# install.packages('rpart')
library('rpart')
# 使用rpart(CART)建立決策樹模型
churn.rp<-rpart(churn ~ ., data=trainset)
churn.rp
summary(churn.rp)
con = rpart.control(cp=0.01)
?rpart.control
churn.rp<-rpart(churn ~., data=trainset,control = con)
# 畫出決策樹
par(mfrow=c(1,1))
plot(churn.rp, margin=0.1)
plot(churn.rp, uniform=TRUE,branch = 0.6, margin=0.1)
?plot.rpart
text(churn.rp)
text(churn.rp, all=TRUE, use.n=TRUE)
printcp(churn.rp)
plotcp(churn.rp)
# install.packages("C50")
library(C50)
data(churn)
str(churnTrain)
names(churnTrain) %in% c("state", "area_code", "account_length")
!names(churnTrain) %in% c("state", "area_code", "account_length")
# 選擇建模變數
variable.list = !names(churnTrain) %in% c('state','area_code','account_length')
churnTrain=churnTrain[,variable.list]
str(churnTrain)
# sample
?sample
sample(1:10)
sample(1:10, size = 5)
sample(c(0,1), size= 10, replace = T)  # 取後放回
sample.int(20, 12) # 兩個參數都要放整數，此例為取1:20中的12個不重複樣本
# 通常產生亂數序列希望是不會重復的。實際上，R 在現在操作視窗下，第一次產生時亂數時，從當下時間 (current time)，生成一個種子 (seed) 出發，不斷迭代更新產生隨機均等分配亂數 (uniform random number)，所以不同時間下執行 R，啟用不同的種子，隨後內部的隨機種子就已經改變了。
# 模擬亂數是不會重復的，有時我們需要模擬結果是可重復的亂數序列，此時需要用函式 set.seed()，在每次產生偽隨機亂數之前，把種子設定種子為某一特定正整數即可。
set.seed(2)
# 把資料分成 1:training data 和 2:testing data
ind <- sample(1:2, size=nrow(churnTrain), replace=T, prob=c(0.7, 0.3))
trainset = churnTrain[ind == 1,]
testset = churnTrain[ind == 2,]
table(ind) / nrow(churnTrain)
table(sample(x = 1:2,size = 100, replace=T))
set.seed(1)
table(sample(x = 1:2,size = 100, replace=T, prob=c(0.7,0.3)))
a = c(1,2,3,4,5,6,7,8,9)
ind = c(1,0,1,0,1,0,1,0,1)
ind == 1
a[ind == 1]
a[ind == 0]
# install.packages('rpart')
library('rpart')
# 使用rpart(CART)建立決策樹模型
churn.rp <- rpart(churn ~ ., data=trainset)
churn.rp
summary(churn.rp)
con = rpart.control(cp=0.01)
?rpart.control
churn.rp <- rpart(churn ~., data=trainset,control = con)
# 畫出決策樹
par(mfrow = c(1,1))
plot(churn.rp, margin=0.1)
plot(churn.rp, uniform=TRUE,branch = 0.6, margin=0.1)
?plot.rpart
text(churn.rp)
text(churn.rp, all=TRUE, use.n=TRUE)
printcp(churn.rp)
plotcp(churn.rp)
ind.rp <- rpart(ind ~ ., data=trainset)
library(rpart)
ind.rp <- rpart(ind ~ ., data=trainset)
rpart(ind ~ ., data=trainset)
house.rp <- rpart(danger ~ area + building_age + building_sqmeter + building_type + price_per_sqmeter,
data = train,
method = "class")
house.rp <- rpart(danger ~ area + building_age + building_sqmeter + building_type + price_per_sqmeter,
data = trainset,
method = "class")
str(house)
str(trainset)
set.seed(1206)
ind <- sample(1:2, size=nrow(house), replace=T, prob=c(0.7, 0.3))
trainset = house[ind==1,]
testset = house[ind==2,]
house.rp <- rpart(danger ~ area + building_age + building_sqmeter + building_type + price_per_sqmeter,
data = trainset,
method = "class")
library(rpart)
house.rp <- rpart(danger ~ area + building_age + building_sqmeter + building_type + price_per_sqmeter,
data = trainset,
method = "class")
summary(house.rp)
printcp(house.rp)
plotcp(house.rp)
plot(house.rp)
text(house.rp)
house.rp
par(mfrow = c(1,1))
plot(house.rp, margin=0.1)
plot(house.rp, uniform=TRUE,branch = 0.6, margin=0.1)
text(house.rp)
text(house.rp, all=TRUE, use.n=TRUE)
library(rattle)
library(rpart.plot)
library(RColorBrewer)
fancyRpartPlot(house.rp)
text(house.rp)
house.rp
#(13) 利用rpart套件建立一預測房屋是否為危樓(danger)的決策樹模型，
#     請利用行政區(area), 屋齡(building_age), 房屋總平方米數(building_sqmeter),
#     房屋類型(building_type)及每平方米價格(price_per_sqmeter)
#     5個變數作為解釋變數放入模型當中建模，並將模型存在house.rp變數中。 [5分]
library(rpart)
# 使用rpart(CART)建立決策樹模型
house.rp <- rpart(danger ~ area + building_age + building_sqmeter + building_type + price_per_sqmeter,
data = trainset,
method = "class")
summary(house.rp)
text(house.rp, all=TRUE, use.n=TRUE)
plot(house.rp, margin=0.1)
plot(house.rp, uniform=TRUE,branch = 0.6, margin=0.1)
plot(house.rp, margin=0.1)
text(house.rp)
plot(house.rp, uniform=TRUE,branch = 0.6, margin=0.1)
text(house.rp)
text(house.rp, all=TRUE, use.n=TRUE)
par(mfrow = c(1,1))
plot(churn.rp, margin=0.1)
plot(churn.rp, uniform=TRUE,branch = 0.6, margin=0.1)
?plot.rpart
text(churn.rp)
# install.packages('rpart')
library('rpart')
# 使用rpart(CART)建立決策樹模型
churn.rp <- rpart(churn ~ ., data=trainset)
# install.packages("C50")
library(C50)
data(churn)
str(churnTrain)
names(churnTrain) %in% c("state", "area_code", "account_length")
!names(churnTrain) %in% c("state", "area_code", "account_length")
# 選擇建模變數
variable.list = !names(churnTrain) %in% c('state','area_code','account_length')
churnTrain=churnTrain[,variable.list]
str(churnTrain)
# sample
?sample
sample(1:10)
sample(1:10, size = 5)
sample(c(0,1), size= 10, replace = T)  # 取後放回
sample.int(20, 12) # 兩個參數都要放整數，此例為取1:20中的12個不重複樣本
# 通常產生亂數序列希望是不會重復的。實際上，R 在現在操作視窗下，第一次產生時亂數時，從當下時間 (current time)，生成一個種子 (seed) 出發，不斷迭代更新產生隨機均等分配亂數 (uniform random number)，所以不同時間下執行 R，啟用不同的種子，隨後內部的隨機種子就已經改變了。
# 模擬亂數是不會重復的，有時我們需要模擬結果是可重復的亂數序列，此時需要用函式 set.seed()，在每次產生偽隨機亂數之前，把種子設定種子為某一特定正整數即可。
set.seed(2)
# 把資料分成 1:training data 和 2:testing data
ind <- sample(1:2, size=nrow(churnTrain), replace=T, prob=c(0.7, 0.3))
trainset = churnTrain[ind == 1,]
testset = churnTrain[ind == 2,]
table(ind) / nrow(churnTrain)
table(sample(x = 1:2,size = 100, replace=T))
set.seed(1)
table(sample(x = 1:2,size = 100, replace=T, prob=c(0.7,0.3)))
a = c(1,2,3,4,5,6,7,8,9)
ind = c(1,0,1,0,1,0,1,0,1)
ind == 1
a[ind == 1]
a[ind == 0]
# install.packages('rpart')
library('rpart')
# 使用rpart(CART)建立決策樹模型
churn.rp <- rpart(churn ~ ., data=trainset)
churn.rp
summary(churn.rp)
con = rpart.control(cp=0.01)
?rpart.control
churn.rp <- rpart(churn ~., data=trainset,control = con)
# 畫出決策樹
par(mfrow = c(1,1))
plot(churn.rp, margin=0.1)
plot(churn.rp, uniform=TRUE,branch = 0.6, margin=0.1)
?plot.rpart
text(churn.rp)
text(churn.rp, all=TRUE, use.n=TRUE)
printcp(churn.rp)
plotcp(churn.rp)
